# -*- coding: utf-8 -*-
"""output file.ipynb

Automatically generated by Colaboratory.

Original file is located at
    https://colab.research.google.com/drive/1hV_xO0hyno9dGl3iMMZ8mBaw_zY0HeiA
"""

"""
This script uses three csv files to generate output csv files that can be directly uploaded to the course table importer
in order to update the course table on undergraduate and graduate courses page on cs.stonybrook.edu

The three csv files needed for this script need to be in the same directory as this script
1) current_sem_file.csv - Now this csv is for all CSE/ISE ugrad and grad courses and their details for fall 2021 semester.
                  Make sure to replace this file with the file for current semester.

2) scraped_course_table_ugrad.csv - This file will be generated from the scrape_course_table.py script. The file initially
                  generated will be called scraped_course_table.csv. You should rename it to scraped_course_table_ugrad
                  if you assigned the undergraduate courses link to the link_to_scrape variable.



Author - Keshav Kumar
Date - 4th Jan 2024


Library requirements:
1) Pandas - https://pandas.pydata.org/docs/index.html
2) Numpy - https://numpy.org/doc/stable/
"""
import pandas as pd
import numpy as np
import sys
import os


"""
Set the current_sem_filename variable to the name of the csv file containing all the details about the courses
that are being taught this current semester. You can check if format is correct by comparing your file with the
Fall2021.csv semester file.

This step is important as it will NOT work if -
1) you dont have the file in the same directory
2) you dont have assign the name of the file correctly
3) Format of the file is incorrect.
"""

# current_sem_filename = "CLSSCHED_sp 24.csv"


def get_courses_arr(current_sem_filename):
    upcom_sem_df = pd.read_csv(
        current_sem_filename, dtype={"Subj": object, "CRS": object}
    )
    upcom_sem_df["course_num"] = upcom_sem_df["Subj"] + " " + upcom_sem_df["CRS"]
    courses = upcom_sem_df["course_num"].unique()
    courses = np.delete(courses, np.where(courses == "  "))

    """
    The three variables:
    1) undergrad_cs_courses - names of all undergrad CSE courses being taught this semester
    2) grad_cs_courses - names of all grad CSE courses being taught this semester
    3) ise_courses - names of all ISE courses being taught this semester
    """
    undergrad_cs_courses = []
    grad_cs_courses = []
    ise_courses = []
    for course in courses:
        if "CSE" in course:
            if int(course.split()[1]) > 500:
                grad_cs_courses.append(course)
            else:
                undergrad_cs_courses.append(course)
        elif "ISE" in course:
            ise_courses.append(course)

    return undergrad_cs_courses, grad_cs_courses, ise_courses


"""
This function takes in two variables:
1) undergrad_cs_courses - the undergrad_cs_courses variable created above
2) current_sem - A string of the name of current sem (examples - 'Fall2021.csv', 'Spring2022.csv')
This function when ran uses the scraped_course_table_ugrad.csv to generate the output file.This file will be generated
from the scrape_course_table.py script. The file initially generated will be called scraped_course_table.csv. You should
rename it to scraped_course_table_ugrad if you assigned the undergraduate courses link to the link_to_scrape variable

It will generate the output file in the same directory as this script.

The output file will be called output_ugrad_currentsem.csv where currentsem will be replaced by the value of the
parameter you pass in for 'current_sem'.
"""


def undergrad(undergrad_cs_courses, current_sem, file_name, num_columns):
    scraped_course_table_df = pd.read_csv(file_name)
    all_ugrad_courses = scraped_course_table_df["course_name"]
    undergrad_cs_courses = [x.split()[0] + x.split()[1] for x in undergrad_cs_courses]

    semester_5 = []
    for course in all_ugrad_courses:
        # print(course)
        if course == "CSE390-394":
            if (
                "CSE390" in undergrad_cs_courses
                or "CSE391" in undergrad_cs_courses
                or "CSE392" in undergrad_cs_courses
                or "CSE393" in undergrad_cs_courses
                or "CSE394" in undergrad_cs_courses
            ):
                semester_5.append("✔")
            else:
                semester_5.append(" ")
        elif course == "CSE190-192":
            if (
                "CSE190" in undergrad_cs_courses
                or "CSE191" in undergrad_cs_courses
                or "CSE192" in undergrad_cs_courses
            ):
                semester_5.append("✔")
            else:
                semester_5.append(" ")
        else:
            if course in undergrad_cs_courses:
                semester_5.append("✔")
            else:
                semester_5.append(" ")

    scraped_course_table_df["semester_5"] = semester_5
    # print(scraped_course_table_df)
    if num_columns == "4":
        scraped_course_table_df.drop("semester_1", axis=1, inplace=True)
        # scraped_course_table_df = scraped_course_table_df.drop("semester_0", axis=1)
        # scraped_course_table_df.drop(columns=["semester_1"], axis=1, inplace=True)
        # scraped_course_table_df.drop("semester_1", axis=1)
        scraped_course_table_df.rename(
            columns={
                "semester_2": "semester_1",
                "semester_3": "semester_2",
                "semester_4": "semester_3",
                "semester_5": "semester_4",
            },
            inplace=True,
        )
    elif num_columns == "5":
        scraped_course_table_df.drop("semester_0", axis=1, inplace=True)
        # scraped_course_table_df = scraped_course_table_df.drop("semester_0", axis=1)
        # scraped_course_table_df.drop("semester_0", axis=1)
        scraped_course_table_df.rename(
            columns={
                "semester_1": "semester_0",
                "semester_2": "semester_1",
                "semester_3": "semester_2",
                "semester_4": "semester_3",
                "semester_5": "semester_4",
            },
            inplace=True,
        )

    scraped_course_table_df.fillna(" ", inplace=True)
    scraped_course_table_df.replace("✔", "&#10004", inplace=True)
    # print(scraped_course_table_df)
    departments = []
    course_number = []
    course_id = []
    for course in scraped_course_table_df["course_name"]:
        if course == "CSE390-394":
            # print('CSE390-394	')
            departments.append("CSE")
            course_number.append("390")
            course_id.append("CSE390 - CSE 394ROW")
            # course_id.append('CSE39XROW')
        elif course == "CSE190-192":
            # print('CSE190-192')
            departments.append("CSE")
            course_number.append("190")
            course_id.append("CSE190 - CSE 192ROW")
            # course_id.append('CSE19XROW')
        else:
            departments.append("CSE")
            course_num = course[3:]
            course_number.append(course_num)
            course_id.append("CSE" + course_num + "ROW")
    # print(course_number)
    # print(course_id)
    # print(len(course_number))
    scraped_course_table_df["Course ID"] = course_id
    scraped_course_table_df["Department"] = departments
    scraped_course_table_df["Course Number"] = course_number

    if num_columns == "4":
        scraped_course_table_df.rename(
            columns={
                "course_name": "Course Name",
                "course_description": "Course Description",
                "semester_1": "Semester 1",
                "semester_2": "Semester 2",
                "semester_3": "Semester 3",
                "semester_4": "Semester 4",
            },
            inplace=True,
        )
        scraped_course_table_df = scraped_course_table_df[
            [
                "Course ID",
                "Department",
                "Course Number",
                "Course Name",
                "Course Description",
                "Semester 1",
                "Semester 2",
                "Semester 3",
                "Semester 4",
            ]
        ]
    elif num_columns == "5":
        scraped_course_table_df.rename(
            columns={
                "course_name": "Course Name",
                "course_description": "Course Description",
                "semester_0": "Semester 0",
                "semester_1": "Semester 1",
                "semester_2": "Semester 2",
                "semester_3": "Semester 3",
                "semester_4": "Semester 4",
            },
            inplace=True,
        )
        scraped_course_table_df = scraped_course_table_df[
            [
                "Course ID",
                "Department",
                "Course Number",
                "Course Name",
                "Course Description",
                "Semester 0",
                "Semester 1",
                "Semester 2",
                "Semester 3",
                "Semester 4",
            ]
        ]
    # scraped_course_table_df.to_csv('output_ugrad_Fall2021.csv', index=False)
    output_file_name = "output_ugrad_" + current_sem + ".csv"
    scraped_course_table_df.to_csv(output_file_name, index=False)
    # print(scraped_course_table_df)
    print("Created output_ugrad_" + current_sem + ".csv file in current directory.")



def get_courses_dict(current_sem_filename):
    upcom_sem_df = pd.read_csv(
        current_sem_filename, dtype={"Subj": object, "CRS": object, "Cmp": object}
    )
    upcom_sem_df["course_num"] = upcom_sem_df["Subj"] + " " + upcom_sem_df["CRS"]
    courses = upcom_sem_df["course_num"].unique()
    courses = np.delete(courses, np.where(courses == " "))

    # Initialize counters
    undergrad_cs_courses = {}
    grad_cs_courses = {}
    ise_courses = {}

    for course in courses:
        if "CSE" in course:
            if int(course.split()[1]) > 500:
                # Count grad CS courses
                grad_courses_df = upcom_sem_df[(upcom_sem_df["course_num"] == course) & (upcom_sem_df["Cmp"] == "LEC")]
                grad_cs_courses[course] = len(grad_courses_df)
            else:
                # Count undergrad CS courses
                undergrad_courses_df = upcom_sem_df[(upcom_sem_df["course_num"] == course) & (upcom_sem_df["Cmp"] == "LEC")]
                undergrad_cs_courses[course] = len(undergrad_courses_df)
        elif "ISE" in course:
            # Count ISE courses
            ise_courses_df = upcom_sem_df[(upcom_sem_df["course_num"] == course) & (upcom_sem_df["Cmp"] == "LEC")]
            ise_courses[course] = len(ise_courses_df)

    return undergrad_cs_courses, grad_cs_courses, ise_courses

def update_semester_5(csv_file, count_dict):
    # Read the CSV file into a DataFrame
    df = pd.read_csv(csv_file)

    # Remove spaces from keys in ugdict
    count_dict_no_space = {key.replace(" ", ""): value for key, value in count_dict.items()}

    # Update the "semester_5" column based on the "course_name" column
    df["semester_5"] = df.apply(lambda row: update_semester_5_value(row, count_dict_no_space), axis=1)

    # Save the updated DataFrame to a new CSV file
    updated_csv_file = "updated_" + csv_file
    df.to_csv(updated_csv_file, index=False)

    print(f"Updated {csv_file} and saved as {updated_csv_file}")

def update_semester_5_value(row, count_dict_no_space):
    course_name = row["course_name"]
    count_key = course_name.replace(" ", "")
    count_value = count_dict_no_space.get(count_key, 0)

    # Update the "semester_5" value only if count_value is greater than 1
    if count_value > 1:
        return str(row["semester_5"]) + " " + str(count_value)
    else:
        return str(row["semester_5"])



"""
This function takes in two variables:
1) grad_cs_courses - the grad_cs_courses variable created above
2) current_sem - A string of the name of current sem (examples - 'Fall2021.csv', 'Spring2022.csv')
This function when ran uses the scraped_course_table_grad.csv to generate the output file.This file will be generated
from the scrape_course_table.py script. The file initially generated will be called scraped_course_table.csv. You should
rename it to scraped_course_table_grad if you assigned the undergraduate courses link to the link_to_scrape variable

It will generate the output file in the same directory as this script.

The output file will be called output_grad_currentsem.csv where currentsem will be replaced by the value of the
parameter you pass in for 'current_sem'.
"""


def grad(grad_cs_courses, current_sem, file_name, num_columns):
    scraped_course_table_df = pd.read_csv(file_name)
    all_grad_courses = scraped_course_table_df["course_name"]
    grad_cs_courses = [x.split()[0] + x.split()[1] for x in grad_cs_courses]
    semester_5 = []
    for course in all_grad_courses:
        if course in grad_cs_courses:
            semester_5.append("✔")
        else:
            semester_5.append(" ")
    scraped_course_table_df["semester_5"] = semester_5
    if num_columns == "4":
        scraped_course_table_df.drop("semester_1", axis=1, inplace=True)
        scraped_course_table_df.rename(
            columns={
                "semester_2": "semester_1",
                "semester_3": "semester_2",
                "semester_4": "semester_3",
                "semester_5": "semester_4",
            },
            inplace=True,
        )
    elif num_columns == "5":
        scraped_course_table_df.drop("semester_0", axis=1, inplace=True)
        scraped_course_table_df.rename(
            columns={
                "semester_1": "semester_0",
                "semester_2": "semester_1",
                "semester_3": "semester_2",
                "semester_4": "semester_3",
                "semester_5": "semester_4",
            },
            inplace=True,
        )
    scraped_course_table_df.fillna(" ", inplace=True)
    scraped_course_table_df.replace("✔", "&#10004", inplace=True)
    departments = []
    course_number = []
    course_id = []
    for course in scraped_course_table_df["course_name"]:
        departments.append("CSE")
        course_num = course[3:]
        course_number.append(course_num)
        course_id.append("CSE" + course_num + "ROW")

    scraped_course_table_df["Course ID"] = course_id
    scraped_course_table_df["Department"] = departments
    scraped_course_table_df["Course Number"] = course_number

    if num_columns == "4":
        scraped_course_table_df.rename(
            columns={
                "course_name": "Course Name",
                "course_description": "Course Description",
                "semester_1": "Semester 1",
                "semester_2": "Semester 2",
                "semester_3": "Semester 3",
                "semester_4": "Semester 4",
            },
            inplace=True,
        )
        scraped_course_table_df = scraped_course_table_df[
            [
                "Course ID",
                "Department",
                "Course Number",
                "Course Name",
                "Course Description",
                "Semester 1",
                "Semester 2",
                "Semester 3",
                "Semester 4",
            ]
        ]
    elif num_columns == "5":
        scraped_course_table_df.rename(
            columns={
                "course_name": "Course Name",
                "course_description": "Course Description",
                "semester_0": "Semester 0",
                "semester_1": "Semester 1",
                "semester_2": "Semester 2",
                "semester_3": "Semester 3",
                "semester_4": "Semester 4",
            },
            inplace=True,
        )
        scraped_course_table_df = scraped_course_table_df[
            [
                "Course ID",
                "Department",
                "Course Number",
                "Course Name",
                "Course Description",
                "Semester 0",
                "Semester 1",
                "Semester 2",
                "Semester 3",
                "Semester 4",
            ]
        ]
    output_file_name = "output_grad_" + current_sem + ".csv"
    scraped_course_table_df.to_csv(output_file_name, index=False)
    print("Created output_grad_" + current_sem + ".csv file in current directory.")


"""
This function takes in two variables:
1) ise_courses - the ise_courses variable created above
2) current_sem - A string of the name of current sem (examples - 'Fall2021.csv', 'Spring2022.csv')
This function when ran uses the scraped_course_table_ise.csv to generate the output file.This file will be generated
from the scrape_course_table.py script. The file initially generated will be called scraped_course_table.csv. You should
rename it to scraped_course_table_ise if you assigned the undergraduate courses link to the link_to_scrape variable

It will generate the output file in the same directory as this script.

The output file will be called output_ise_currentsem.csv where currentsem will be replaced by the value of the
parameter you pass in for 'current_sem'.
"""


def ise(ise_courses, current_sem, file_name, num_columns):
    scraped_course_table_df = pd.read_csv(file_name)
    all_ise_courses = scraped_course_table_df["course_name"]
    ise_courses = [x.split()[0] + x.split()[1] for x in ise_courses]

    semester_5 = []
    for course in all_ise_courses:
        # print(course)
        if course == "ISE390-392":
            if (
                "ISE390" in undergrad_cs_courses
                or "ISE391" in undergrad_cs_courses
                or "ISE392" in undergrad_cs_courses
            ):
                semester_5.append("✔")
            else:
                semester_5.append(" ")
        else:
            if course in ise_courses:
                semester_5.append("✔")
            else:
                semester_5.append(" ")

    scraped_course_table_df["semester_5"] = semester_5
    # print(scraped_course_table_df)
    if num_columns == "4":
        scraped_course_table_df.drop("semester_1", axis=1, inplace=True)
        scraped_course_table_df.rename(
            columns={
                "semester_2": "semester_1",
                "semester_3": "semester_2",
                "semester_4": "semester_3",
                "semester_5": "semester_4",
            },
            inplace=True,
        )
    elif num_columns == "5":
        scraped_course_table_df.drop("semester_0", axis=1, inplace=True)
        scraped_course_table_df.rename(
            columns={
                "semester_1": "semester_0",
                "semester_2": "semester_1",
                "semester_3": "semester_2",
                "semester_4": "semester_3",
                "semester_5": "semester_4",
            },
            inplace=True,
        )

    scraped_course_table_df.fillna(" ", inplace=True)
    scraped_course_table_df.replace("✔", "&#10004", inplace=True)
    # print(scraped_course_table_df)
    departments = []
    course_number = []
    course_id = []
    for course in scraped_course_table_df["course_name"]:
        if course == "ISE390-392":
            # print('ISE390-392	')
            departments.append("ISE")
            course_number.append("390")
            course_id.append("ISE390 - ISE 392ROW")
            # course_id.append('ISE39XROW')
        else:
            departments.append("ISE")
            course_num = course[3:]
            course_number.append(course_num)
            course_id.append("ISE" + course_num + "ROW")
    # print(course_number)
    # print(course_id)
    # print(len(course_number))
    scraped_course_table_df["Course ID"] = course_id
    scraped_course_table_df["Department"] = departments
    scraped_course_table_df["Course Number"] = course_number

    if num_columns == "4":
        scraped_course_table_df.rename(
            columns={
                "course_name": "Course Name",
                "course_description": "Course Description",
                "semester_1": "Semester 1",
                "semester_2": "Semester 2",
                "semester_3": "Semester 3",
                "semester_4": "Semester 4",
            },
            inplace=True,
        )
        scraped_course_table_df = scraped_course_table_df[
            [
                "Course ID",
                "Department",
                "Course Number",
                "Course Name",
                "Course Description",
                "Semester 1",
                "Semester 2",
                "Semester 3",
                "Semester 4",
            ]
        ]
    elif num_columns == "5":
        scraped_course_table_df.rename(
            columns={
                "course_name": "Course Name",
                "course_description": "Course Description",
                "semester_0": "Semester 0",
                "semester_1": "Semester 1",
                "semester_2": "Semester 2",
                "semester_3": "Semester 3",
                "semester_4": "Semester 4",
            },
            inplace=True,
        )
        scraped_course_table_df = scraped_course_table_df[
            [
                "Course ID",
                "Department",
                "Course Number",
                "Course Name",
                "Course Description",
                "Semester 0",
                "Semester 1",
                "Semester 2",
                "Semester 3",
                "Semester 4",
            ]
        ]
    # scraped_course_table_df.to_csv('output_ugrad_Fall2021.csv', index=False)
    output_file_name = "output_ise_" + current_sem + ".csv"
    scraped_course_table_df.to_csv(output_file_name, index=False)
    # print(scraped_course_table_df)
    print("Created output_ise_" + current_sem + ".csv file in current directory.")


"""
Simple two calls to the functions created above with the current semester passed in generates expected output files
for any given current semester.

Replace the second parameter with the current semester name (examples - Spring2022, Fall2023 etc.)
"""


if __name__ == "__main__":
  # undergrad_cs_courses,

  # file_name= "CLSSCHED_sp 24.csv"
  # current_sem_filename = "CLSSCHED_sp 24.csv"
  # num_columns=4

  # current_sem = "Spring 2024"  # name of current semester
  # Scraper file that we scraped from scrap from scrape script
  # file_name = "example_scraped_course_table_ugrad.csv"

  # Finding the Ugrad , grad and ISE courses name in seperate array/List
  # undergrad_courses, grad_courses, ise_courses = get_courses_arr(current_sem_filename)
  # undergrad(undergrad_courses, current_sem,file_name, num_columns)


  # Updating the count of lectures that we extracted and stored in dictionary from current_sem_file
  # csv_file="output_ugrad_Spring 2024.csv" #output file that we are updating with count
  # ugdict, grad_courses, ise_courses = get_courses_dict(current_sem_filename)
  # This will return a updated_output_ugrad_Spring 2024.csv file which is updated with the
  # update_semester_5(csv_file, ugdict)


  arguments = sys.argv
  if len(arguments) < 6:
      print(
          "Please run the script again after providing all three arguments in the correct order: \n"
          "Argument Number 1: Current Semester File Name\n"
          "Argument Number 2: Scraped File Name \n"
          "Argument Number 3: Current Semester Name \n"
          "Argument Number 4: grad/undergrad \n"
          "Argument Number 5: Number of columns (4 or 5) \n"
          "Example : python scrape_course_table.py <sem_file_name> <scraped_file_name> <current_sem_name> <grad/undergrad> <4/5>"
      )
  elif arguments[5] != "4" and arguments[5] != "5":
      print("Invalid number of columns, please enter 4 or 5")
  else:
      if os.path.isfile(arguments[1]):
          undergrad_cs_courses, grad_cs_courses, ise_courses = get_courses_arr(
              arguments[1]
          )
          if arguments[4] == "grad":
              if os.path.isfile(arguments[2]):
                  grad(grad_cs_courses, arguments[3], arguments[2], arguments[5])
              else:
                  print(
                      "No such file: ",
                      arguments[2],
                      "! Please check and run the script again.",
                  )
          elif arguments[4] == "undergrad":
              if os.path.isfile(arguments[2]):
                  undergrad(
                      undergrad_cs_courses, arguments[3], arguments[2], arguments[5]
                  )
                  ugdict, grad_courses, ise_courses = get_courses_dict(arguments[1])
                  csv_file="output_file.csv"
                  # This will return a updated_output_ugrad_Spring 2024.csv file which is updated with the
                  update_semester_5(csv_file, ugdict)
              else:
                  print(
                      "No such file: ",
                      arguments[2],
                      "! Please check and run the script again.",
                  )
          elif arguments[4] == "ise":
              if os.path.isfile(arguments[2]):
                  ise(ise_courses, arguments[3], arguments[2], arguments[5])
              else:
                  print(
                      "No such file: ",
                      arguments[2],
                      "! Please check and run the script again.",
                  )
          else:
              print("Check your input and run the program again")
      else:
          print(
              "No such file: ",
              arguments[1],
              "! Please check and run the script again.",
          )

# python scrape_course_table.py <sem_file_name> <scraped_file_name> <current_sem_name> <grad/undergrad> <4/5>
# import pandas as pd
# import numpy as np

# def get_courses_dict(current_sem_filename):
#     upcom_sem_df = pd.read_csv(
#         current_sem_filename, dtype={"Subj": object, "CRS": object, "Cmp": object}
#     )
#     upcom_sem_df["course_num"] = upcom_sem_df["Subj"] + " " + upcom_sem_df["CRS"]
#     courses = upcom_sem_df["course_num"].unique()
#     courses = np.delete(courses, np.where(courses == " "))

#     # Initialize counters
#     undergrad_cs_courses = {}
#     grad_cs_courses = {}
#     ise_courses = {}

#     for course in courses:
#         if "CSE" in course:
#             if int(course.split()[1]) > 500:
#                 # Count grad CS courses
#                 grad_courses_df = upcom_sem_df[(upcom_sem_df["course_num"] == course) & (upcom_sem_df["Cmp"] == "LEC")]
#                 grad_cs_courses[course] = len(grad_courses_df)
#             else:
#                 # Count undergrad CS courses
#                 undergrad_courses_df = upcom_sem_df[(upcom_sem_df["course_num"] == course) & (upcom_sem_df["Cmp"] == "LEC")]
#                 undergrad_cs_courses[course] = len(undergrad_courses_df)
#         elif "ISE" in course:
#             # Count ISE courses
#             ise_courses_df = upcom_sem_df[(upcom_sem_df["course_num"] == course) & (upcom_sem_df["Cmp"] == "LEC")]
#             ise_courses[course] = len(ise_courses_df)

#     return undergrad_cs_courses, grad_cs_courses, ise_courses

# # Example usage:
# current_sem_filename = "CLSSCHED_sp 24.csv"
# undergrad_courses, grad_courses, ise_courses = get_courses_dict(current_sem_filename)

# # Print the counts for each category
# print("Undergrad CS Courses Lectures Count:", undergrad_courses)
# print("Grad CS Courses Lectures Count:", grad_courses)
# print("ISE Courses Lectures Count:", ise_courses)

# # import pandas as pd

# def update_semester_5(csv_file, count_dict):
#     # Read the CSV file into a DataFrame
#     df = pd.read_csv(csv_file)

#     # Remove spaces from keys in ugdict
#     count_dict_no_space = {key.replace(" ", ""): value for key, value in count_dict.items()}

#     # Update the "semester_5" column based on the "course_name" column
#     df["semester_5"] = df.apply(lambda row: update_semester_5_value(row, count_dict_no_space), axis=1)

#     # Save the updated DataFrame to a new CSV file
#     updated_csv_file = "updated_" + csv_file
#     df.to_csv(updated_csv_file, index=False)

#     print(f"Updated {csv_file} and saved as {updated_csv_file}")

# def update_semester_5_value(row, count_dict_no_space):
#     course_name = row["course_name"]
#     count_key = course_name.replace(" ", "")
#     count_value = count_dict_no_space.get(count_key, 0)

#     # Update the "semester_5" value only if count_value is greater than 1
#     if count_value > 1:
#         return str(row["semester_5"]) + " " + str(count_value)
#     else:
#         return str(row["semester_5"])

# # Example usage:
# # csv_file = "your_file.csv"
# # count_dict = {
# #     "CSE390": 5,
# #     "CSE391": 3,
# #     "CSE392": 2,
# #     # Add more courses and counts as needed
# # }
# csv_file="output_ugrad_Spring 2024.csv"
# ugdict, grad_courses, ise_courses = get_courses_dict(current_sem_filename)
# update_semester_5(csv_file, ugdict)

